import os
import json
from flask import Flask, request, jsonify
from telebot import TeleBot, types
from flask_cors import CORS

BOT_TOKEN = "8133185900:AAHVHTArbMIGbiQi6QKy2cvJArm9Vti8InU"
SUPER_ADMIN_ID = 5899057322

# Bot obyektini yaratish
bot = TeleBot(BOT_TOKEN)
app = Flask(__name__)
CORS(app)

# Til matnlari (soddalashtirilgan, texts.py faylini import qilish shart emas)
TEXTS = {
    'uz': {
        "new_application_admin": "Yangi Ariza Keldi!",
        "application_received_user_confirmation": "‚úÖ Arizangiz muvaffaqiyatli qabul qilindi! üéâ\n\nSizning arizangiz mutaxassislarimiz tomonidan ko'rib chiqiladi. Iltimos, javobni kuting. Tez orada siz bilan bog'lanamiz!\n\nRahmat! üòä",
        "error_occurred_try_again": "‚ùå Kechirasiz, arizani qayta ishlashda kutilmagan xato yuz berdi.\nIltimos, qayta urinib ko'ring yoki bot adminiga murojaat qiling.\n\nUzr so'raymiz! üòî",
    },
    'ru': {
        "new_application_admin": "–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!",
        "application_received_user_confirmation": "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞! üéâ\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. –í—Å–∫–æ—Ä–µ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!\n\n–°–ø–∞—Å–∏–±–æ! üòä",
        "error_occurred_try_again": "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.\n\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è! üòî",
    }
}

# Asosiy URL manziliga so'rov kelganda
@app.route('/')
def home():
    return "Flask backend ishlamoqda. Web App arizalarini kutmoqda."

# Web App'dan kelgan arizalarni qabul qilish uchun API endpoint
@app.route('/submit_application', methods=['POST'])
def submit_application():
    if not request.is_json:
        return jsonify({"status": "error", "message": "Request must be JSON"}), 400

    data = request.json
    print(f"Received data from Web App: {data}")

    user_id = data.get('userId')
    if not user_id:
        return jsonify({"status": "error", "message": "User ID not provided"}), 400

    try:
        
        lang = 'uz' # Standart til
        # Agar 'lang' keyi data ichida bo'lsa, undan foydalanamiz
        if data.get('lang') in TEXTS:
            lang = data.get('lang')

        txt = TEXTS.get(lang, TEXTS['uz']) # Tanlangan til yoki standart O'zbek tili

        # Adminlarga yuboriladigan xabar matnini shakllantirish
        admin_message_text = (
            f"üîî <b>{txt['new_application_admin']}</b> üîî\n\n"
            f"--- <b>Foydalanuvchi Ma'lumotlari</b> ---\n"
            f"üÜî <b>Foydalanuvchi ID:</b> <code>{user_id}</code>\n\n"
            f"--- <b>Ariza Tafsilotlari</b> ---\n"
            f"1Ô∏è‚É£ <b>Yechish usuli:</b> <i>{data.get('withdrawalMethod', 'Kiritilmagan')}</i>\n"
            f"2Ô∏è‚É£ <b>Valyuta:</b> <i>{data.get('currency', 'Kiritilmagan')}</i>\n"
            f"3Ô∏è‚É£ <b>Kurator Likee ID:</b> <i>{data.get('curatorLikeeId', 'Kiritilmagan')}</i>\n"
            f"4Ô∏è‚É£ <b>Sizning Likee ID:</b> <i>{data.get('userLikeeId', 'Kiritilmagan')}</i>\n"
            f"5Ô∏è‚É£ <b>Miqdor ($):</b> <i>{data.get('amount', 'Kiritilmagan')}</i>\n"
            f"6Ô∏è‚É£ <b>Bank karta raqami:</b> <code>{data.get('bankCard', 'Kiritilmagan')}</code>\n"
            f"7Ô∏è‚É£ <b>Aloqa raqami:</b> <i>{data.get('contact', 'Kiritilmagan')}</i>\n\n"
            f"‚ú® **Tezda ko'rib chiqing!** ‚ú®"
        )

        # Admin ID'lari (faqat Super Admin ID'si)
        admin_ids_to_send = [SUPER_ADMIN_ID]

        for admin_id in admin_ids_to_send:
            try:
                bot.send_message(admin_id, admin_message_text, parse_mode="HTML")
                print(f"[{user_id}] Application sent to admin: {admin_id}")
            except Exception as e:
                print(f"[{user_id}] Failed to send application to admin {admin_id}: {e}")

        # Foydalanuvchiga tasdiqlash xabari
        try:
            bot.send_message(
                chat_id=user_id,
                text=txt['application_received_user_confirmation'],
                reply_markup=types.ReplyKeyboardRemove()
            )
            print(f"[{user_id}] User: Application completed and confirmation sent.")
        except Exception as e:
            print(f"[{user_id}] Failed to send confirmation to user {user_id}: {e}")

        return jsonify({"status": "success", "message": "Application submitted successfully"}), 200

    except Exception as e:
        print(f"Error processing application: {e}")
        if user_id:
            try:
                bot.send_message(user_id, txt['error_occurred_try_again'])
            except Exception as tg_e:
                print(f"Failed to send error message to user {user_id}: {tg_e}")
        return jsonify({"status": "error", "message": "Internal server error: " + str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port, debug=True)
